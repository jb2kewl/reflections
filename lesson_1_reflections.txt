How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It was easier to see than normal manual scan of the file.
	
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	Easier to go back and track logically changes that may have broken something you didn't realize for a long time.
	
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	Pro
	You can decide the context of each logical commit
	You can keep the number of commits to a minimum
	You can choose the description of the commit
	Easier for you to go back and understand the commits
	
	Con
	You might forget to commit for a long time
	You might make to many commits
	You might make to few commits
	
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	
	When programming, it is more common to have multiple files dependent on one logical change.

How can you use the commands git log and git diff to view the history of files?

	The git log command shows your commit comments.
	the git diff command shows the file changes line by line.

How might using version control make you more confident to make changes that could break something?
	
	It makes me more confident to make changes knowing that I can easily roll it back to a working state without having to figure out how to do that manually.
	
Now that you have your workspace set up, what do you want to try using Git for?

	I want to use it as a version control software